{"version":3,"file":"vue.js","sources":["../src/observe/index.js","../src/state.js","../src/index.js","../src/init.js"],"sourcesContent":["export function observe(data) {\n  if (typeof data !== 'object' && data !== 'null') return // data不是对象就不用劫持\n  return new Observe(data)\n}\n\nclass Observe {\n  constructor(data) {\n    this.walking(data)\n  }\n  walking(data) {\n    Object.keys(data).forEach((key) => defineReactive(data, key, data[key])) // 遍历 data 对象属性，依次执行defineReactive方法进行数据劫持\n  }\n}\n/**\n * defineReactive 通过Object.defineProperty api 对数据进行数据劫持\n * @param target 目标数据对象\n * @param key 属性\n * @param value 值\n */\nexport function defineReactive(target, key, value) {\n  observe(value) // 深层次对象递归\n  Object.defineProperty(target, key, {\n    get() {\n      // 访问属性时候执行\n      return value\n    },\n    set(newValue) {\n      // 修改属性值时候执行\n      if (value === newValue) return // 新值和旧值相等就不用赋值\n      value = newValue\n    }\n  })\n}\n","import { observe } from './observe/index'\n/**\n * Vue 初始化状态，进行data computed watch props等属性的初始化\n * @param vm 实例对象\n */\nexport const initState = function (vm) {\n  const options = vm.$options\n  if (options.data) {\n    initData(vm)\n  }\n  // ...还会有其他属性的初始化操作\n}\nfunction initData(vm) {\n  let data = vm.$options.data\n  data = typeof data === 'function' ? data.apply(vm) : data // 判断data类型，可能是函数也可能是对象\n  vm._data = data\n  observe(data)\n  for (const key in data) {\n    handleProxy(vm, '_data', key)\n  }\n}\nfunction handleProxy(vm, target, key) {\n  Object.defineProperty(vm, key, {\n    get() {\n      return vm[target][key]\n    },\n    set(newValue) {\n      vm[target][key] = newValue\n    }\n  })\n}\n","import { initMixin } from './init'\n/**\n * Vue 构造函数\n * @param options 为传入的对象,如:{data:{},computed:{},methods:{}}\n */\nfunction Vue(options) {\n  this._init(options)\n}\ninitMixin(Vue)\n\nexport default Vue\n","import { initState } from './state'\n// 给Vue原型添加_init方法\nexport const initMixin = (Vue) => {\n  Vue.prototype._init = function (options) {\n    const vm = this\n    vm.$options = options // 将options挂载在实例上，以$开头，和$set、$nextTick一样的命名规则\n    initState(vm) // 初始化状态\n  }\n}\n"],"names":["observe","data","Observe","constructor","this","walking","Object","keys","forEach","key","defineReactive","target","value","defineProperty","get","set","newValue","initState","vm","$options","initData","let","apply","_data","handleProxy","Vue","options","_init","prototype"],"mappings":"wfAAO,SAASA,EAAQC,GACF,UAAhB,OAAOA,GAA8B,SAATA,GACzB,IAAIC,EAAQD,CAAI,CACzB,OAEMC,EACJC,YAAYF,GACVG,KAAKC,QAAQJ,CAAI,CACnB,CACAI,QAAQJ,GACNK,OAAOC,KAAKN,CAAI,EAAEO,QAASC,IAAQC,OASRC,EATuBV,EASfQ,EATqBA,EAU1DT,EAD0CY,EATqBX,EAAKQ,EAUvD,EAAbT,KACAM,OAAOO,eAAeF,EAAQF,EAAK,CACjCK,MAEE,OAAOF,CACR,EACDG,IAAIC,GAEEJ,IAAUI,IACdJ,EAAQI,EACV,CACF,CAAC,EAZI,IAAwBL,EAAQF,EAAKG,CAT8B,CAAC,CACzE,CACF,CCPyB,SAAZK,EAAsBC,GAEjC,GADgBA,EAAGC,SACPlB,KACVmB,CAAAA,IAIcF,EAJLA,EAKXG,IAAIpB,EAAOiB,EAAGC,SAASlB,KACvBA,EAAuB,YAAhB,OAAOA,EAAsBA,EAAKqB,MAAMJ,CAAE,EAAIjB,EAErDD,EADAkB,EAAGK,MAAQtB,CACC,EACZ,IAAK,MAAMQ,KAAOR,EAChBuB,CAGJ,SAAqBN,EAAIP,EAAQF,GAC/BH,OAAOO,eAAeK,EAAIT,EAAK,CAC7BK,MACE,OAAOI,EAAGP,GAAQF,EACnB,EACDM,IAAIC,GACFE,EAAGP,GAAQF,GAAOO,CACpB,CACF,CAAC,CACH,EAZgBE,EAAI,QAAST,CAAG,CAVjB,CAGf,CCNA,SAASgB,EAAIC,GACXtB,KAAKuB,MAAMD,CAAO,CACpB,QACUD,ECLJG,UAAUD,MAAQ,SAAUD,GACnBtB,KACRe,SAAWO,EACdT,EAFWb,IAEC"}